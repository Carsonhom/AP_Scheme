(define (make-monitored f)
  (let ((counter 0))
    (lambda (x)
      (cond ((eq? x 'how-many-calls?) counter)
            ((eq? x 'reset-count) (set! counter 0))
            (else (begin (set! counter (+ counter 1))
                         (f x)))))))

(define (make-accumulator n)
  (let ((sum n))
   (lambda (x) (set! sum (+ sum x)) sum)))


(define (make-account balance pword)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m p)
    (cond ((and (eq' p pword) (eq? m 'withdraw)) withdraw)
          ((and (eq' p pword) (eq? m 'deposit)) deposit)
          ((and (not (eq? p pword)) (or (eq? m 'deposit) (eq? m 'withdraw)))
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m)))))
  dispatch)

(define (make-joint account oldpass newpass)
  (cond ((not (account 'deposit oldpass)) ("Wrong Password"))
        (else (lambda (msg pass)
                (cond ((eq? pass newpass) (account msg oldpass))
                      (else ("Wrong Password")))))))

(define (thing num)
  (define s (make-monitored thing))
  (s num)
  (cond ((and (eq? (s 'how-many-calls?) 1) (eq? num 1)) 1)
        ((and (eq? (s 'how-many-calls?) 1)) (eq? num 0) -1)
        (else num)))

(define (f x)
  (let ((state-variable 0))
    (lambda (n)
      (cond ((eq? n 0) (set! state variable (+ state-variable 1)) state-variable)
            (else state-variable)))))
