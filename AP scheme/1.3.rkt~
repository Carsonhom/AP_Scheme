(load "/Applications/Racket/scheme/ttt.scm")

;1.3
(define (identity x) x)
(define (inc x) (+ x 1))

(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next (term a)) (+ result a))))
    (iter a 0))

;1.31
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next (term a)) (* result a))))
  (iter a 1))

(define (factorial x)
  (define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next (term a)) (* result a))))
  (iter a 1))
  (product term 1 next x))

;1.32


;1.33
(define (gcd a b)
  (let ((r (remainder a b)))
    (cond ((=  r 0) b)
          (else ( gcd b r)))))
